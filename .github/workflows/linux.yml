name: linux

permissions:
  contents: read
  packages: read

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    strategy:
      matrix:
        config:
          - preset: x64-linux-gcc-release
            compiler: gcc
          - preset: x64-linux-clang-debug
            compiler: clang
            clang-tidy: true
          - preset: x64-linux-llvm-coverage
            compiler: clang
            llvm-coverage: true

    runs-on: ubuntu-latest
    container: ubuntu:25.10

    env:
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/.vcpkg_cache
      VCPKG_BINARY_SOURCES: "default"

    steps:
      - uses: actions/checkout@v4

      - name: vcpkg-cache-directory
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      - name: vcpkg-cache-restore
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          key: vcpkg-${{ matrix.config.compiler }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ matrix.config.compiler }}-

      - name: install-tools
        run: |
          apt update -y
          apt upgrade -y
          apt install -y curl tar git zip unzip make autoconf libtool ninja-build cmake
          apt install -y clang-20 clang-tidy-20 clang-format-20 llvm-20-tools g++-15
          update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-15 10
          update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-15 10
          update-alternatives --install /usr/bin/clang clang /usr/bin/clang-20 200
          update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-20 200
          update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-20 200
          update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-20 200
          update-alternatives --install /usr/bin/run-clang-tidy run-clang-tidy /usr/bin/run-clang-tidy-20 200

      - name: install-raylib-dependencies
        run: |
          apt install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config libgl1-mesa-dev libx11-dev libxrandr-dev
      - name: cmake-configure
        run: cmake --preset ${{ matrix.config.preset }}

      - name: cmake-build
        run: cmake --build --preset ${{ matrix.config.preset }} --parallel $(( $(nproc --all) + 1 ))

      - name: cmake-test
        run: ctest --preset ${{ matrix.config.preset }} --parallel $(( $(nproc --all) + 1 ))

      - name: clang-tidy
        if: ${{ matrix.config.clang-tidy }}
        run: cmake --build --preset ${{ matrix.config.preset }} --target clang-tidy

      - name: llvm-coverage
        if: ${{ matrix.config.llvm-coverage }}
        run: cmake --build --preset ${{ matrix.config.preset }} --target llvm-coverage
