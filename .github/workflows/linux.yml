name: linux

permissions:
  contents: read
  packages: read

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    strategy:
      matrix:
        config:
          - preset: x64-linux-gcc-release
            compiler: gcc
            clang-tidy: false
          - preset: x64-linux-clang-debug
            compiler: clang
            clang-tidy: true

    runs-on: ubuntu-latest
    container:
      image: ghcr.io/druidengine/images/ubuntu-dev:main
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    env:
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/.vcpkg_cache
      VCPKG_BINARY_SOURCES: "default"

    steps:
      - uses: actions/checkout@v4

      - name: vcpkg-cache-directory
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      - name: vcpkg-cache-restore
        uses: actions/cache@v4
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          key: vcpkg-${{ matrix.config.compiler }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ matrix.config.compiler }}-

      - name: cmake-configure
        run: cmake --preset ${{ matrix.config.preset }}

      - name: cmake-build
        run: cmake --build --preset ${{ matrix.config.preset }} --parallel $(( $(nproc --all) + 1 ))

      - name: cmake-test
        run: ctest --preset ${{ matrix.config.preset }} --parallel $(( $(nproc --all) + 1 ))

      - name: clang-tidy
        if: ${{ matrix.config.clang-tidy }}
        run: cmake --build --preset ${{ matrix.config.preset }} --target clang-tidy

      - name: clang-code-coverage
        if: ${{ matrix.config.compiler == 'clang' }}
        run: |
          apt-get update && apt-get install -y llvm-22
          export LLVM_PROFILE_FILE="coverage/raw.profraw"
          export PATH="/usr/lib/llvm-22/bin:$PATH"
          
          cmake --preset ${{ matrix.config.preset }} \
            -DCMAKE_CXX_FLAGS="--coverage -fprofile-instr-generate -fcoverage-mapping"
          
          cmake --build --preset ${{ matrix.config.preset }} --parallel $(( $(nproc --all) + 1 ))
          ctest --preset ${{ matrix.config.preset }} --parallel $(( $(nproc --all) + 1 ))
          
          mkdir -p coverage
          find build/ -name "*.profraw" -exec cp {} coverage/ \;
          
          llvm-profdata merge -sparse coverage/*.profraw -o coverage/indexed.profdata
          
          echo "Test executables found for coverage: "
          find build/ -type f -executable -path "*/test/*" -o -path "*/bin/*"
          
          llvm-cov show \
            -instr-profile=coverage/indexed.profdata \
            --show-line-counts-or-regions \
            --ignore-filename-regex="build/.*|.*external/.*|.*vcpkg/.*|.*third_party/.*" \
            $(find build/ -type f -executable -path "*/test/*" -o -path "*/bin/*") \
            -format=html -output-dir=coverage-report

      - name: upload-code-coverage-artifact
        if: ${{ matrix.config.compiler == 'clang' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage-report
          
